<?xml version="1.0" encoding="utf-8"?>

<compositor>
  <include>EffectFiles/template.xml</include>
  <include>EffectFiles/GeometryPassConfig.xml</include>
  <include>EffectFiles/LightPrePassConfig.xml</include>

  <shader name="defaultQuad_vs" type="vertex">
    <version>120</version>
    <file>Shaders/defaultQuad.vert</file>
  </shader>

  <!--<uniform name="u_modelViewMat" type="mat4">
    <inbuilt_value>modelview_matrix</inbuilt_value>
  </uniform>

  <uniform name="u_projMat">
    <inbuilt_value>projection_matrix</inbuilt_value>
  </uniform>

  <uniform name="u_inv_modelViewMat" type="mat4">
    <inbuilt_value>inv_modelview_matrix</inbuilt_value>
  </uniform>

  <uniform name="u_inv_projMat" type="mat4">
    <inbuilt_value>inv_projection_matrix</inbuilt_value>
  </uniform>-->
  
  <uniform name="u_farPlane" type="float">
    <inbuilt_value>far_plane</inbuilt_value>
  </uniform>

  <technique>
    <forward_pass name="GeometryPass">
      <clear_color>0 0 0 1</clear_color>
      <uniform>u_farPlane</uniform>
      <output_buffer target="color0">b_RT0</output_buffer>
      <output_buffer target="color1">b_RT1</output_buffer>
      <output_buffer target="color2">b_RT2</output_buffer>
    </forward_pass>

    <deferred_pass name="LightPrePass">
      <input_buffer unit="0" varname="o_destination">b_PerTileStorage</input_buffer>
      <input_buffer unit="1" varname="u_normalDepthTex">b_RT2</input_buffer>
      <output_buffer target="color">b_computeShaderTrigger</output_buffer>
      
      <uniform_buffer>u_lightsBuffer</uniform_buffer>
      <!--<uniform>u_viewMat</uniform> --><!-- modelview need to manually resolve --><!--
      <uniform>u_projMat</uniform>-->
      <uniform>u_countPointLight</uniform>
      <uniform>u_countDirectionalLight</uniform>
      <uniform>u_arrayDirectionalLight</uniform>
      <uniform>u_arrayPointLight</uniform>
      <uniform>u_destSize</uniform>

      <uniform>u_projMat</uniform>
      <uniform>u_viewMat</uniform>

      <shader>defaultQuad_vs</shader>
      <shader>computeLightTile_fs</shader>

    </deferred_pass>

    <!--<deferred_pass name="LightPass">
      
    </deferred_pass>-->
  </technique>

</compositor>